[{"/Users/ishahaiderr/Desktop/NessmaLotion/src/index.js":"1","/Users/ishahaiderr/Desktop/NessmaLotion/src/App.js":"2","/Users/ishahaiderr/Desktop/NessmaLotion/src/Adding.js":"3","/Users/ishahaiderr/Desktop/NessmaLotion/src/Editt.js":"4"},{"size":234,"mtime":1678429069000,"results":"5","hashOfConfig":"6"},{"size":3417,"mtime":1678429069000,"results":"7","hashOfConfig":"6"},{"size":1458,"mtime":1678429069000,"results":"8","hashOfConfig":"6"},{"size":6368,"mtime":1678523196000,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"w65xhp",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"/Users/ishahaiderr/Desktop/NessmaLotion/src/index.js",[],[],"/Users/ishahaiderr/Desktop/NessmaLotion/src/App.js",["25","26","27"],[],"import './App.css';\nimport Adding from \"./Adding\";\nimport Editt from './Editt';\nimport {BrowserRouter as Router,Route,Switch} from 'react-router-dom'; \nimport React, {useState, useEffect} from \"react\"; \n\nfunction App() {\n  const changes = React.createRef(); \n  \n  const [clicked, setClicked] = useState(true);\n  const [notes, setNotes] = useState([]); //this is to update the words and everything we have\n  const [activeNote, setActiveNote] = useState(false); \n  const [highestId, setHighestId] = useState(0);\n  const [noteID, setnoteID] = useState(''); \n  const [lest,setID] = useState('');\n  const [cons,setCON] = useState(''); \n\n  const currentDate = new Date();\n  const formattedDate = currentDate.toLocaleString('en-US', {\n    month: 'long',\n    day: 'numeric',\n    year: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric',\n    second: 'numeric',\n    hour12: true\n  });\n  const [myId, setMyId] = useState([])\n \n  //take the activeID and write in it\n  const onAddNote = () => {\n    const newId = highestId+1; \n    const Note = {\n      title: \"New Title\",\n      body: \"to be added..\",\n      lastModified: formattedDate,\n      id: newId\n    };\n\n    setHighestId(newId); \n    localStorage.setItem('all_IDs', JSON.stringify(myId))\n    setNotes([Note, ...notes]); \n    const newItem = Note.id;   \n    setMyId([...myId,newItem]);\n  }\n\n\n  useEffect(() => {\n    const empty = {'Title': '' , 'ID': '32323232', 'Content': '', 'Date': ''} \n    localStorage.setItem('32323232', JSON.stringify(empty));\n  \n    const storedIds = JSON.parse(localStorage.getItem('all_IDs'));\n    if (storedIds && storedIds.length > 0) {\n      const maxId = Math.max(...storedIds);\n      setHighestId(maxId);\n    }\n  }, []);\n\n  const saveNote = (newNote, noteId) => {\n    //how to create a note On the side \n    setnoteID(noteID);\n    setID(newNote.Tit); \n    setCON(newNote.Con); \n  }\n  \n\n  const byeBye = (event) =>{\n    event.preventDefault();\n    if(clicked === true){\n      changes.current.style.display = 'none'; \n      setClicked(false); \n    }\n    else{\n      changes.current.style.display = 'inline'; \n      setClicked(true); \n    }\n  }\n\n  const getActiveNote = () => {\n    return notes.find((note) => note.id === activeNote)\n  }\n  \n  //\n  return (\n        <div className=\"App\">    \n                  <div className = \"header\"> \n                      <button className = 'sidetrip' id = 'sidezz' onClick = {byeBye}>&#8801;</button>\n                      <div className = \"information\">\n                          <h1>Lotion </h1> \n                          <h2>Like notion, but worse.</h2>\n                      </div>\n                  </div>\n                <div className = \"flexbox-container\">\n                <div className = \"flexbox-item flexbox-item-1\" style={{display: 'inline'}} ref = {changes} id = \"byebye\"> \n                  <Adding notes = {notes} onAddNote = {onAddNote} activeNote = {activeNote} setActiveNote = {setActiveNote} noteS = {noteID} lestS = {lest} conS = {cons}/>\n                </div>\n\n                <div className = \"flexbox-item flexbox-item-2\" id = \"rightSide\"> \n                  {activeNote ? <Editt key={activeNote.id}  saveNote={saveNote} activeNote={getActiveNote()} notes={notes} setNotes={setNotes}/> : <p className = \"message\">Select a note, or create a new one.</p>}\n                </div>\n            </div>\n                \n        </div>\n  );\n}\n\n//Pages\n//Layout\n//\n\nexport default App;\n","/Users/ishahaiderr/Desktop/NessmaLotion/src/Adding.js",["28","29"],[],"import {useState} from \"react\"; \nfunction Adding({ notes, onAddNote, activeNote, setActiveNote, noteS, lestS, conS }){\n   //use valueActive to loop through.... or that is what activeNote is anywyas but try\n  const [title, setTitle] = useState(''); \n  const [body, setBody] = useState(''); \n  const getNoteData = (note) => {\n    const data = localStorage.getItem(note.id);\n    if (data) {\n      const parsedData = JSON.parse(data);\n      setTitle(parsedData.title);\n      body(parsedData.body);\n    }\n    setTitle('Title'); \n    setBody('Content not found'); \n  } // right it should just automatically be updated...? \n\n  return (\n        <><div className=\"app-sidebar\">\n        <div className=\"intro\">\n          <h1>Notes</h1>\n          <button onClick={onAddNote} className='adding' id='add'>&#43;</button>\n        </div>\n        <div className=\"app-sidebar-notes\">\n\n        {notes.map((note) => {\n          return (\n            <div\n              key={note.id}\n              className={`app-sidebar-note ${note.id === activeNote ? \"active\" : \"\"}`} onClick={() => setActiveNote(note.id)}>\n              <div className=\"sidebar-note-title\">\n                <strong>{lestS}</strong>\n                <small className=\"note-meta\">{note.lastModified}</small>\n              </div>\n              <p dangerouslySetInnerHTML={{ __html: conS }}></p>\n            </div>\n          );\n        })}\n\n        </div>\n      </div>\n        </>\n    ); \n}\nexport default Adding; ","/Users/ishahaiderr/Desktop/NessmaLotion/src/Editt.js",["30","31"],[],"import React, { useState, useEffect, useRef } from 'react';\nimport ReactQuill from 'react-quill';\nimport 'react-quill/dist/quill.snow.css';\n\n// try chanigng it to a class if this dosent work\nfunction Editt({ activeNote, toDelete, saveNote, notes, setNotes }) {\n    /* const onEditField = (key, value) => {\n         const note = JSON.parse(localStorage.getItem(activeNote.id))\n         onUpdateNote({\n             id: activeNote.id, \n             [key] : value, \n             lastMoified: note.Date\n         })\n     }; */\n\n    const options = {\n        year: \"numeric\",\n        month: \"long\",\n        day: \"numeric\",\n        hour: \"numeric\",\n        minute: \"numeric\",\n    };\n    const [value, setValue] = useState('');\n    const [isEditing, setEditing] = useState(false);\n    const [title, setTitle] = useState('');\n    const [dictTitle, setdictTitle] = useState('');\n    const formRef = useRef(null);\n    const textboxRef = React.createRef();\n    const [TEXT, sendingText] = useState('');\n    const madeTextRef = React.createRef();\n    const currentDate = new Date().toLocaleString(\"en-US\", options);\n    const starter = new Date().toISOString().slice(0, 16);\n    const [selectedDate, setSelectedDate] = useState(currentDate);\n    const [selectedStuff, setdictStuff] = useState(TEXT);\n    const timeEdit = React.createRef();\n    const timeFinal = React.createRef();\n    const titleEnter = React.createRef();\n    const finalTitle = React.createRef();\n\n    const handleDateChange = (event) => {\n        const news = new Date(event.target.value).toLocaleString(\"en-US\", options); //this is to format it so it looks nice\n        setSelectedDate(news); //everytime it is pressed etc\n        //when this is pressed than it gets rid of the current time and date the date changes fully\n    }\n\n    const handleTitle = (event) => {\n        event.preventDefault();\n        titleEnter.current.style.display = 'none';\n        finalTitle.current.style.display = 'inline';\n    }\n\n    const handleDeleteNote = (idToDelete) => {\n        const answer = window.confirm(\"Are you sure?\");\n        if (answer){\n            localStorage.removeItem(idToDelete);\n        }\n            \n    }\n\n    const handleChange = (event) => {\n        event.preventDefault();\n        setTitle(event.target.value); //this adds to the title value\n    }\n    useEffect(() => {\n        const data = localStorage.getItem(activeNote.id);\n        if (data) {\n            const parsedData = JSON.parse(data);\n            setTitle(parsedData.Title);\n            setValue(parsedData.Content);\n\n        }\n        else {\n            setValue('');\n            setTitle('new title');\n        }\n    }, [activeNote]);\n\n    // const sendToDelete(){\n\n    //}\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        if (isEditing) {\n            setEditing(false);\n            textboxRef.current.style.display = 'inline';\n            madeTextRef.current.style.display = 'none';\n            timeEdit.current.style.display = 'inline';\n            timeFinal.current.style.display = 'none';\n\n\n        } else {\n            setEditing(true);\n            textboxRef.current.style.display = 'none';\n            madeTextRef.current.style.display = 'inline';\n            timeEdit.current.style.display = 'none';\n            timeFinal.current.style.display = 'inline';\n            setdictTitle(title);\n        }\n        //find its contents \n        const note = JSON.parse(localStorage.getItem(activeNote.id));\n        const n = { Tit: note.Title, Cont: note.Content, Date: note.currentDate }\n        saveNote(n, activeNote.id);\n    }\n\n    const reEdit = (event) => {\n        event.preventDefault();\n        titleEnter.current.style.display = 'inline';\n        finalTitle.current.style.display = 'none';\n        setTitle(event.target.value);\n    }\n\n\n    useEffect(() => {\n        const formattedValue = value.replace(/\\n/g, '<br>');\n        sendingText(formattedValue);\n        document.querySelector('.value').innerHTML = formattedValue;\n        const books = {\n            'Title': title,\n            'ID': activeNote.id,\n            'Content': TEXT,\n            'Date': currentDate\n        };\n        localStorage.setItem(activeNote.id.toString(), JSON.stringify(books));\n\n        const data = localStorage.getItem(activeNote.id);\n        if (data) {\n            const parsedData = JSON.parse(data);\n            setdictTitle(parsedData.Title);\n            setdictStuff(parsedData.Content);\n\n        }\n    }, [value, activeNote.id, dictTitle]);\n\n    //you need the notes id that it is on ....\n\n    return (\n        <>\n            <div className=\"first\">\n                <div className=\"bar\">\n                    <form onSubmit={handleTitle}>\n                        <div className=\"title\">\n                            <input divClass=\"edit_title\" style={{ display: \"inline\" }} ref={titleEnter} type=\"text\" onChange={handleChange} value={title}></input>\n                            <div className=\"final_title\" style={{ display: \"none\" }} ref={finalTitle} onClick={reEdit}>\n                                <h1>{title}</h1>\n                            </div>\n\n                            <input style={{ display: \"inline\" }} defaultValue={starter} ref={timeEdit} type=\"datetime-local\" onChange={handleDateChange} />\n\n                            <div className=\"Creation\" style={{ display: \"none\" }} ref={timeFinal} >\n                                <p>{selectedDate}</p>\n                            </div>\n\n                        </div>\n                    </form>\n                    <form className=\"first\" onSubmit={handleSubmit} ref={formRef}>\n                        <div className=\"bb\">\n                            <button type=\"button\" className=\"cc\" onClick={() => handleDeleteNote(activeNote.id)}> Delete</button>\n                            <input type=\"submit\" className=\"cc\" value={isEditing ? 'Edit' : 'Save'} />\n                        </div>\n                    </form>\n                </div>\n            </div>\n            <div>\n                <div className=\"text-editor\" style={{ display: \"inline\" }} ref={textboxRef}>\n                    <ReactQuill theme=\"snow\" value={value} onChange={setValue} />\n                </div>\n                <div className=\"value\" style={{ display: \"none\" }} ref={madeTextRef}>\n                </div>\n            </div>\n        </>\n    );\n}\n\nexport default Editt;",{"ruleId":"32","severity":1,"message":"33","line":4,"column":26,"nodeType":"34","messageId":"35","endLine":4,"endColumn":32},{"ruleId":"32","severity":1,"message":"36","line":4,"column":33,"nodeType":"34","messageId":"35","endLine":4,"endColumn":38},{"ruleId":"32","severity":1,"message":"37","line":4,"column":39,"nodeType":"34","messageId":"35","endLine":4,"endColumn":45},{"ruleId":"32","severity":1,"message":"38","line":4,"column":10,"nodeType":"34","messageId":"35","endLine":4,"endColumn":15},{"ruleId":"32","severity":1,"message":"39","line":6,"column":9,"nodeType":"34","messageId":"35","endLine":6,"endColumn":20},{"ruleId":"32","severity":1,"message":"40","line":34,"column":12,"nodeType":"34","messageId":"35","endLine":34,"endColumn":25},{"ruleId":"41","severity":1,"message":"42","line":132,"column":8,"nodeType":"43","endLine":132,"endColumn":41,"suggestions":"44"},"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'Route' is defined but never used.","'Switch' is defined but never used.","'title' is assigned a value but never used.","'getNoteData' is assigned a value but never used.","'selectedStuff' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'TEXT', 'currentDate', and 'title'. Either include them or remove the dependency array.","ArrayExpression",["45"],{"desc":"46","fix":"47"},"Update the dependencies array to be: [value, activeNote.id, dictTitle, title, TEXT, currentDate]",{"range":"48","text":"49"},[4464,4497],"[value, activeNote.id, dictTitle, title, TEXT, currentDate]"]